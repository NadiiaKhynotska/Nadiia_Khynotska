
//Ітераційний підхід
function sum_to_n_a(n: number): number {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += i;
    }
    return sum;
}
//Складність:
//
// Час: O(n) - Функція проходить через всі числа від 1 до n.
//
// Простір: O(1) - Використовується постійний обсяг пам'яті.

//Рекурсивний підхід
function sum_to_n_b(n: number): number {
    if (n === 1) {
        return 1;
    }
    return n + sum_to_n_b(n - 1);
}
// Час: O(n) - Функція викликає себе n разів.
//
// Простір: O(n) - Використовується стек викликів, який зростає з кожним рекурсивним викликом.


//Математична формула
function sum_to_n_c(n: number): number {
    return (n * (n + 1)) / 2;
}
//Час: O(1) - Функція виконує постійну кількість операцій, незалежно від вхідного значення n.
//
// Простір: O(1) - Використовується постійний обсяг пам'яті.
//
// Підсумок
// sum_to_n_a: Ітераційний підхід, ефективний за обсягом пам'яті, але лінійний за часом.
//
// sum_to_n_b: Рекурсивний підхід, лінійний за часом і пам'яттю.
//
// sum_to_n_c: Математична формула, найефективніший за часом і пам'яттю, з постійною складністю.

